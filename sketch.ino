#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

template<unsigned w, unsigned h> class Bitmap
{
public:
  unsigned width(){return w;}
  unsigned height(){return h;}
  void draw(Adafruit_GFX *d, int x,int y,byte c)
  {
    d->drawBitmap(x,y,bmp,w,h,c);
  }
  Bitmap(unsigned char bmp[w*h/8])
  {
    this->bmp = bmp;
  }
private:
  unsigned char *bmp;
};

unsigned char logobmp[] = {
B00000000,B00000000,B00011111,B11111100,B00000000,B00000000,
B00000000,B00000001,B11111111,B11111111,B10000000,B00000000,
B00000000,B00000111,B11111000,B00011111,B11100000,B00000000,
B00000000,B00011111,B10000000,B00000001,B11111000,B00000000,
B00000000,B00111100,B00000000,B00000000,B01111100,B00000000,
B00000000,B11111000,B00011000,B00000000,B00011110,B00000000,
B00000001,B11100001,B11111100,B00000000,B00000111,B10000000,
B00000011,B11000000,B00000000,B00000110,B00000011,B11000000,
B00000111,B10000000,B00000000,B00000000,B00000001,B11000000,
B00000111,B00000000,B00000000,B00000000,B00000000,B11100000,
B00001110,B00000000,B00000000,B00000000,B00000000,B01110000,
B00011100,B00000000,B00000000,B00000000,B00000000,B00111000,
B00011100,B00000000,B00000000,B00000000,B00000000,B00111000,
B00111010,B01111000,B11110000,B00000000,B00100100,B00011100,
B00110010,B11000000,B11111000,B00000001,B10001110,B00001100,
B01110000,B00111110,B11111100,B00000011,B00001111,B00001110,
B01110000,B10011111,B11111000,B00000111,B11111111,B10001110,
B01100000,B11000000,B11110000,B00000011,B11111110,B10000110,
B11100000,B00000011,B10000000,B00000000,B11100000,B10000111,
B11100000,B00000000,B00000000,B00000000,B01100000,B10000111,
B11100000,B00111111,B00011000,B00000000,B00111000,B00000111,
B11000000,B00000111,B11110000,B00000000,B00011111,B00000111,
B11000000,B00000010,B00000000,B00000000,B00001110,B00000011,
B11000000,B00000111,B10000000,B00000000,B00000010,B00000011,
B11000000,B00000111,B11100000,B00000000,B00000110,B00000011,
B11000000,B00000001,B10011111,B10000000,B01111111,B00000011,
B11000000,B00000000,B11000100,B00010001,B00000110,B00000011,
B11100000,B00000000,B11110100,B00000011,B01111110,B00000111,
B11100000,B00000000,B11111111,B00011011,B11111100,B00000111,
B11100000,B00000000,B01111111,B11111111,B11111000,B00000110,
B01100000,B00000000,B01111111,B11111111,B11101000,B00000110,
B01110000,B00000000,B00011111,B11111111,B11000000,B00001110,
B01110000,B00000000,B00001110,B01110111,B00000000,B00001110,
B00110000,B00000000,B00001011,B11111000,B10000000,B00001100,
B00111000,B00000000,B00000100,B00000001,B00100000,B00011100,
B00011100,B00000000,B00000001,B11111100,B00110000,B00111000,
B00011100,B00000001,B00000000,B00000000,B00110000,B00111000,
B00001110,B00000001,B10000000,B00000000,B00110000,B01110000,
B00000111,B00000001,B11000000,B00000000,B00110000,B11100000,
B00000011,B10000000,B10101000,B00000000,B00110001,B11100000,
B00000011,B11000000,B01010110,B00000000,B01100011,B11000000,
B00000001,B11100000,B00101101,B11000000,B00100111,B10000000,
B00000000,B01111000,B00000011,B00111111,B00011111,B00000000,
B00000000,B00111110,B00000000,B00000000,B00111100,B00000000,
B00000000,B00011111,B10000000,B00000001,B11111000,B00000000,
B00000000,B00000111,B11111000,B00111111,B11100000,B00000000,
B00000000,B00000001,B11111111,B11111111,B10000000,B00000000,
B00000000,B00000000,B00111111,B11111000,B00000000,B00000000};

Bitmap<48,48> logo(logobmp);

static Adafruit_PCD8544 display(5,6,7,8,9);

volatile unsigned count = 0;
static unsigned lastCount = 0;
static unsigned long lastTime = millis();
static float speed = 0;
static unsigned L = 1913;
static bool firstClick = true;

enum speedformat{
   METERS_PER_SECOND,
   KILOMETERS_PER_HOUR
};

void sensor()
{
  count++;  
}

void setup() 
{
  // put your setup code here, to run once:
  display.begin();
  display.clearDisplay();
  display.setContrast(60);
  display.setTextColor(BLACK);
  display.setTextSize(1);
  logo.draw(&display,(LCDWIDTH-LCDHEIGHT)/2,0,BLACK);
  display.display();
  attachInterrupt(digitalPinToInterrupt(2),sensor,FALLING);
  delay(1000);
}

float getSpeed(speedformat f)
{
  switch(f)
  {
    case METERS_PER_SECOND:
      return speed;
      break;
    case KILOMETERS_PER_HOUR:
      return speed/3.6;
      break;
  }
}



void drawMainScreen()
{
  display.setTextSize(3);
  display.print(getSpeed(METERS_PER_SECOND));
}

void loop() {
  // put your main code here, to run repeatedly:
  if(count != lastCount)
  {
    unsigned long tm = millis();
    if(!firstClick)
      speed = ((float)(count - lastCount))/((float)(tm - lastTime))*L; //mm per millisecond (or meters per second);
    lastCount = count;
    lastTime = tm;
    firstClick = false;
  }
  else if(millis() - lastTime > 500)
  {
    lastTime = millis();
    speed = 0;
    firstClick = true;
  }
  display.clearDisplay();
  drawMainScreen();
  display.display();
  
  delay(200);
}
